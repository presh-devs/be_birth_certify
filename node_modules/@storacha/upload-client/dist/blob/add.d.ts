/**
 * @param {API.Signer} id
 * @param {API.Principal} serviceDid
 * @param {API.Receipt} receipt
 */
export function createConcludeInvocation(id: ed25519.Signer.Signer, serviceDid: ed25519.Signer.Principal, receipt: ed25519.Receipt): ed25519.IssuedInvocationView<{
    can: "ucan/conclude";
    with: `did:${string}:${string}` & `did:${string}` & ed25519.Signer.Phantom<{
        protocol: "did:";
    }>;
    nb: BlobCapabilities.Schema.InferStruct<{
        receipt: BlobCapabilities.Schema.Schema<ed25519.Signer.Link<unknown, number, number, 0 | 1>, any>;
    }>;
}>;
/**
 * Store a blob to the service. The issuer needs the `blob/add`
 * delegated capability.
 *
 * Required delegated capability proofs: `blob/add`
 *
 * @param {API.InvocationConfig} conf Configuration
 * for the UCAN invocation. An object with `issuer`, `with` and `proofs`.
 *
 * The `issuer` is the signing authority that is issuing the UCAN
 * invocation(s). It is typically the user _agent_.
 *
 * The `with` is the resource the invocation applies to. It is typically the
 * DID of a space.
 *
 * The `proofs` are a set of capability delegations that prove the issuer
 * has the capability to perform the action.
 *
 * The issuer needs the `blob/add` delegated capability.
 * @param {import('multiformats').MultihashDigest} digest
 * @param {Blob|Uint8Array} data Blob data.
 * @param {API.RequestOptions} [options]
 * @returns {Promise<API.BlobAddOk>}
 */
export function add({ issuer, with: resource, proofs, audience }: API.InvocationConfig, digest: import("multiformats").MultihashDigest, data: Blob | Uint8Array, options?: API.RequestOptions): Promise<API.BlobAddOk>;
/** Returns the ability used by an invocation. */
export const ability: "space/blob/add";
export function input(digest: import("multiformats").MultihashDigest, size: number): {
    blob: {
        digest: Uint8Array<ArrayBufferLike>;
        size: number;
    };
};
import { ed25519 } from '@ucanto/principal';
import * as BlobCapabilities from '@storacha/capabilities/blob';
import type * as API from '../types.js';
//# sourceMappingURL=add.d.ts.map