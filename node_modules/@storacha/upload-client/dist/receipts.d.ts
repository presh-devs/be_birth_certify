/**
 * Polls for a receipt for an executed task by its CID.
 *
 * @template {API.Capability} C
 * @template {Record<string, any>} S
 * @param {API.UCANLink<[C]>} taskCid
 * @param {API.ReceiptGetOptions<S> & API.Retryable} [options]
 * @returns {Promise<API.InferReceipt<C, S>>}
 */
export function poll<C extends API.Capability, S extends Record<string, any>>(taskCid: API.UCANLink<[C]>, options?: API.ReceiptGetOptions<S> & API.Retryable): Promise<API.InferReceipt<C, S>>;
/**
 * Get a receipt for an executed task by its CID.
 *
 * @template {API.Capability} C
 * @template {Record<string, any>} S
 * @param {API.UCANLink<[C]>} taskCid
 * @param {API.ReceiptGetOptions<S>} [options]
 * @returns {Promise<API.Result<API.InferReceipt<C, S>, API.ReceiptNotFound|API.ReceiptMissing>>}
 */
export function get<C extends API.Capability, S extends Record<string, any>>(taskCid: API.UCANLink<[C]>, options?: API.ReceiptGetOptions<S>): Promise<API.Result<API.InferReceipt<C, S>, API.ReceiptNotFound | API.ReceiptMissing>>;
/** @import * as API from './types.js' */
/** @implements {API.ReceiptNotFound} */
export class ReceiptNotFound extends Error implements API.ReceiptNotFound {
    /**
     * @param {API.UnknownLink} taskCid
     */
    constructor(taskCid: API.UnknownLink);
    name: "ReceiptNotFound";
    taskCid: API.UnknownLink;
    get reason(): string;
}
/** @implements {API.ReceiptMissing} */
export class ReceiptMissing extends Error implements API.ReceiptMissing {
    /**
     * @param {API.UnknownLink} taskCid
     */
    constructor(taskCid: API.UnknownLink);
    name: "ReceiptMissing";
    taskCid: API.UnknownLink;
    get reason(): string;
}
import type * as API from './types.js';
//# sourceMappingURL=receipts.d.ts.map