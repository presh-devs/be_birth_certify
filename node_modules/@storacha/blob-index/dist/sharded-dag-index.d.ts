export const version: "index/sharded/dag@0.1";
export const ShardedDAGIndexSchema: Schema.VariantSchema<{
    "index/sharded/dag@0.1": Schema.StructSchema<{
        content: Schema.Schema<API.Link<unknown, number, number, 0 | 1>, any>;
        shards: Schema.ArraySchema<API.Link<unknown, number, number, 0 | 1>, any>;
    }, unknown>;
}, unknown>;
export const MultihashSchema: Schema.Schema<Uint8Array<ArrayBufferLike>, unknown>;
export const BlobIndexSchema: Schema.Schema<[Uint8Array<ArrayBufferLike>, [Uint8Array<ArrayBufferLike>, [number, number]][]], unknown>;
export function extract(archive: Uint8Array): API.Result<API.ShardedDAGIndexView, API.DecodeFailure | API.UnknownFormat>;
export function view({ root, blocks }: {
    root: API.IPLDBlock;
    blocks: Map<string, API.IPLDBlock>;
}): API.Result<API.ShardedDAGIndexView, API.DecodeFailure | API.UnknownFormat>;
export class UnknownFormat extends Failure {
    /** @param {string} [reason] */
    constructor(reason?: string);
    name: "UnknownFormat";
    #private;
}
export class DecodeFailure extends Failure {
    /** @param {string} [reason] */
    constructor(reason?: string);
    name: "DecodeFailure";
    #private;
}
export function create(content: API.UnknownLink): API.ShardedDAGIndexView;
export function archive(model: API.ShardedDAGIndex): Promise<API.Result<Uint8Array, API.EncodeFailure>>;
import * as API from './api.js';
import { Schema } from '@ucanto/core';
import { Failure } from '@ucanto/core';
//# sourceMappingURL=sharded-dag-index.d.ts.map