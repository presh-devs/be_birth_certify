export const assert: import("@ucanto/interface").TheCapabilityParser<import("@ucanto/interface").CapabilityMatch<"assert/*", import("@ucanto/interface").URI<"did:">, {}>>;
/**
 * Claims that a CID is available at a URL.
 */
export const location: import("@ucanto/interface").TheCapabilityParser<import("@ucanto/interface").CapabilityMatch<"assert/location", import("@ucanto/interface").URI<"did:">, Schema.InferStruct<{
    content: Schema.Schema<import("multiformats").Link<unknown, number, number, 0 | 1> | Schema.InferStruct<{
        digest: Schema.Schema<Uint8Array<ArrayBufferLike>, unknown>;
    }>, any>;
    location: Schema.ArraySchema<import("@ucanto/interface").URI<`${string}:`>, unknown>;
    range: Schema.Schema<Schema.InferStruct<{
        offset: Schema.NumberSchema<number & import("multiformats").Phantom<{
            typeof: "integer";
        }>, unknown>;
        length: Schema.Schema<(number & import("multiformats").Phantom<{
            typeof: "integer";
        }>) | undefined, unknown>;
    }> | undefined, unknown>;
    space: Schema.Schema<import("@ucanto/interface").PrincipalView<`did:${string}:${string}` & `did:${string}` & import("multiformats").Phantom<{
        protocol: "did:";
    }>> | undefined, any>;
}>>>;
/**
 * Claims that a CID includes the contents claimed in another CID.
 */
export const inclusion: import("@ucanto/interface").TheCapabilityParser<import("@ucanto/interface").CapabilityMatch<"assert/inclusion", import("@ucanto/interface").URI<"did:">, Schema.InferStruct<{
    content: Schema.Schema<import("multiformats").Link<unknown, number, number, 0 | 1> | Schema.InferStruct<{
        digest: Schema.Schema<Uint8Array<ArrayBufferLike>, unknown>;
    }>, any>;
    includes: Schema.Schema<import("multiformats").Link<unknown, number, number, 1>, any>;
    proof: Schema.Schema<import("multiformats").Link<unknown, number, number, 1> | undefined, any>;
}>>>;
/**
 * Claims that a content graph can be found in blob(s) that are identified and
 * indexed in the given index CID.
 */
export const index: import("@ucanto/interface").TheCapabilityParser<import("@ucanto/interface").CapabilityMatch<"assert/index", import("@ucanto/interface").URI<"did:">, Schema.InferStruct<{
    content: Schema.Schema<import("multiformats").Link<unknown, number, number, 0 | 1> | Schema.InferStruct<{
        digest: Schema.Schema<Uint8Array<ArrayBufferLike>, unknown>;
    }>, any>;
    index: Schema.Schema<import("multiformats").Link<unknown, number, number, 1>, any>;
}>>>;
/**
 * Claims that a CID's graph can be read from the blocks found in parts.
 */
export const partition: import("@ucanto/interface").TheCapabilityParser<import("@ucanto/interface").CapabilityMatch<"assert/partition", import("@ucanto/interface").URI<"did:">, Schema.InferStruct<{
    content: Schema.Schema<import("multiformats").Link<unknown, number, number, 0 | 1> | Schema.InferStruct<{
        digest: Schema.Schema<Uint8Array<ArrayBufferLike>, unknown>;
    }>, any>;
    blocks: Schema.Schema<import("multiformats").Link<unknown, number, number, 1> | undefined, any>;
    parts: Schema.ArraySchema<import("multiformats").Link<unknown, number, number, 1>, any>;
}>>>;
/**
 * Claims that a CID links to other CIDs.
 */
export const relation: import("@ucanto/interface").TheCapabilityParser<import("@ucanto/interface").CapabilityMatch<"assert/relation", import("@ucanto/interface").URI<"did:">, Schema.InferStruct<{
    content: Schema.Schema<import("multiformats").Link<unknown, number, number, 0 | 1> | Schema.InferStruct<{
        digest: Schema.Schema<Uint8Array<ArrayBufferLike>, unknown>;
    }>, any>;
    children: Schema.ArraySchema<import("multiformats").Link<unknown, number, number, 0 | 1>, any>;
    parts: Schema.ArraySchema<Schema.InferStruct<{
        content: Schema.Schema<import("multiformats").Link<unknown, number, number, 1>, any>;
        includes: Schema.Schema<Schema.InferStruct<{
            content: Schema.Schema<import("multiformats").Link<unknown, number, number, 1>, any>;
            parts: Schema.Schema<import("multiformats").Link<unknown, number, number, 1>[] | undefined, any>;
        }> | undefined, unknown>;
    }>, any>;
}>>>;
/**
 * Claim data is referred to by another CID and/or multihash.
 * e.g CAR CID & CommP CID
 */
export const equals: import("@ucanto/interface").TheCapabilityParser<import("@ucanto/interface").CapabilityMatch<"assert/equals", import("@ucanto/interface").URI<"did:">, Schema.InferStruct<{
    content: Schema.Schema<import("multiformats").Link<unknown, number, number, 0 | 1> | Schema.InferStruct<{
        digest: Schema.Schema<Uint8Array<ArrayBufferLike>, unknown>;
    }>, any>;
    equals: Schema.Schema<import("multiformats").Link<unknown, number, number, 0 | 1>, any>;
}>>>;
import { Schema } from '@ucanto/validator';
//# sourceMappingURL=assert.d.ts.map