/**
 * Capability can only be delegated (but not invoked) allowing audience to
 * derive any `blob/replica/` prefixed capability.
 */
export const replica: import("@ucanto/interface").TheCapabilityParser<import("@ucanto/interface").CapabilityMatch<"blob/replica/*", `did:${string}:${string}` & `did:${string}` & import("multiformats").Phantom<{
    protocol: "did:";
}>, any>>;
/**
 * The `blob/replica/allocate` capability that allows an agent to allocate a
 * Blob for replication into a space identified by did:key in the `with` field.
 *
 * The Allocate task receipt includes an async task that will be performed by
 * a storage node: `blob/replica/transfer`. The `blob/replica/transfer` task is
 * completed when the storage node has transferred the blob from its location to
 * the storage node.
 */
export const allocate: import("@ucanto/interface").TheCapabilityParser<import("@ucanto/interface").CapabilityMatch<"blob/replica/allocate", `did:${string}:${string}` & `did:${string}` & import("multiformats").Phantom<{
    protocol: "did:";
}>, Schema.InferStruct<{
    blob: Schema.StructSchema<{
        digest: Schema.Schema<Uint8Array<ArrayBufferLike>, unknown>;
        size: Schema.NumberSchema<number & import("multiformats").Phantom<{
            typeof: "integer";
        }>, unknown>;
    }, unknown>;
    space: Schema.Schema<import("@ucanto/interface").PrincipalView<`did:key:${string}` & `did:${string}` & import("multiformats").Phantom<{
        protocol: "did:";
    }>>, any>;
    site: Schema.Schema<import("multiformats").Link<unknown, number, number, 1>, any>;
    cause: Schema.Schema<import("multiformats").Link<unknown, number, number, 1>, any>;
}>>>;
/**
 * The `blob/replica/transfer` capability invocation allows an agent to transfer
 * a Blob for replication into a space identified by did:key in the `with` field.
 */
export const transfer: import("@ucanto/interface").TheCapabilityParser<import("@ucanto/interface").CapabilityMatch<"blob/replica/transfer", `did:${string}:${string}` & `did:${string}` & import("multiformats").Phantom<{
    protocol: "did:";
}>, Schema.InferStruct<{
    blob: Schema.StructSchema<{
        digest: Schema.Schema<Uint8Array<ArrayBufferLike>, unknown>;
        size: Schema.NumberSchema<number & import("multiformats").Phantom<{
            typeof: "integer";
        }>, unknown>;
    }, unknown>;
    space: Schema.Schema<import("@ucanto/interface").PrincipalView<`did:key:${string}` & `did:${string}` & import("multiformats").Phantom<{
        protocol: "did:";
    }>>, any>;
    site: Schema.Schema<import("multiformats").Link<unknown, number, number, 1>, any>;
    cause: Schema.Schema<import("multiformats").Link<unknown, number, number, 1>, any>;
}>>>;
import { Schema } from '@ucanto/validator';
import { Link } from '@ucanto/validator';
export { Schema, Link };
//# sourceMappingURL=index.d.ts.map