/**
 * Capability can only be delegated (but not invoked) allowing audience to
 * derive any `blob/` prefixed capability.
 */
export const blob: import("@ucanto/interface").TheCapabilityParser<import("@ucanto/interface").CapabilityMatch<"blob/*", `did:${string}:${string}` & `did:${string}` & import("multiformats").Phantom<{
    protocol: "did:";
}>, any>>;
/**
 * The `blob/allocate` capability can be invoked to create a memory address on a
 * storage node where blob content can be written via a HTTP PUT request.
 */
export const allocate: import("@ucanto/interface").TheCapabilityParser<import("@ucanto/interface").CapabilityMatch<"blob/allocate", `did:${string}:${string}` & `did:${string}` & import("multiformats").Phantom<{
    protocol: "did:";
}>, Schema.InferStruct<{
    blob: Schema.StructSchema<{
        digest: Schema.Schema<Uint8Array<ArrayBufferLike>, unknown>;
        size: Schema.NumberSchema<number & import("multiformats").Phantom<{
            typeof: "integer";
        }>, unknown>;
    }, unknown>;
    cause: Schema.Schema<import("multiformats").Link<unknown, number, number, 1>, any>;
    space: Schema.Schema<import("@ucanto/interface").PrincipalView<`did:key:${string}` & `did:${string}` & import("multiformats").Phantom<{
        protocol: "did:";
    }>>, any>;
}>>>;
/**
 * The `blob/accept` capability invocation should either succeed when content is
 * delivered on allocated address or fail if no content is allocation expires
 * without content being delivered.
 */
export const accept: import("@ucanto/interface").TheCapabilityParser<import("@ucanto/interface").CapabilityMatch<"blob/accept", `did:${string}:${string}` & `did:${string}` & import("multiformats").Phantom<{
    protocol: "did:";
}>, Schema.InferStruct<{
    blob: Schema.StructSchema<{
        digest: Schema.Schema<Uint8Array<ArrayBufferLike>, unknown>;
        size: Schema.NumberSchema<number & import("multiformats").Phantom<{
            typeof: "integer";
        }>, unknown>;
    }, unknown>;
    space: Schema.Schema<import("@ucanto/interface").PrincipalView<`did:key:${string}` & `did:${string}` & import("multiformats").Phantom<{
        protocol: "did:";
    }>>, any>;
    _put: Schema.StructSchema<{
        'ucan/await': Schema.Schema<[string, import("multiformats").Link<unknown, number, number, 0 | 1>], any>;
    }, unknown>;
}>>>;
import { Schema } from '@ucanto/validator';
import { Link } from '@ucanto/validator';
export { Schema, Link };
//# sourceMappingURL=index.d.ts.map